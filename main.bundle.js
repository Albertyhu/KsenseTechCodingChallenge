(self.webpackChunkwebpack_template=self.webpackChunkwebpack_template||[]).push([[179],{941:(r,t,n)=>{"use strict";n(666);var e=n(379),o=n.n(e),i=n(795),a=n.n(i),c=n(569),s=n.n(c),u=n(565),l=n.n(u),f=n(216),d=n.n(f),p=n(589),h=n.n(p),A=n(456),v={};v.styleTagTransform=h(),v.setAttributes=l(),v.insert=s().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),o()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals;var g=n(26);function m(r,t,n,e,o,i,a){try{var c=r[i](a),s=c.value}catch(r){return void n(r)}c.done?t(s):Promise.resolve(s).then(e,o)}function y(r){return function(){var t=this,n=arguments;return new Promise((function(e,o){var i=r.apply(t,n);function a(r){m(i,e,o,a,c,"next",r)}function c(r){m(i,e,o,a,c,"throw",r)}a(void 0)}))}}n(752);var C=[],b=[],x=function(){var r=y(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,fetch("https://jsonplaceholder.typicode.com/users").then((function(r){return r.json()})).then((function(r){C=r})).then((function(){B()})).catch((function(r){return console.log("Error fetching users: "+r)}));case 2:case"end":return r.stop()}}),r)})));return function(){return r.apply(this,arguments)}}(),B=function(){var r=y(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,fetch("https://jsonplaceholder.typicode.com/posts").then((function(r){return r.json()})).then((function(r){C.forEach((function(t){var n=r.filter((function(r){return r.userId===t.id})),e={id:t.id,name:t.name,posts:n};b.push(e)}))})).then((function(){I()})).catch((function(r){return console.log("Error fetching posts: "+r)}));case 2:case"end":return r.stop()}}),r)})));return function(){return r.apply(this,arguments)}}(),w=function(r){var t=document.querySelector(".opened");null!==t&&t!==r&&(t.classList.remove("opened"),t.classList.add("closed")),r.classList.contains("closed")?(r.classList.remove("closed"),r.classList.add("opened")):(r.classList.remove("opened"),r.classList.add("closed"))},I=function(){var r=document.querySelector("#UserTable");b.forEach((function(t){!function(r,t){var n=document.createElement("div");n.classList.add("UserSectionWrapper");var e=document.createElement("div");e.classList.add("user_section");var o=document.createElement("div");o.innerHTML=r.name,o.classList.add("name"),e.appendChild(o);var i=document.createElement("div"),a=document.createElement("img");a.src=g,a.classList.add("icon"),i.appendChild(a),e.appendChild(o),e.appendChild(i),n.appendChild(e),t.appendChild(n);var c=document.createElement("div");c.classList.add("PostWrapper"),n.appendChild(c),c.classList.add("closed"),r.posts.forEach((function(r,t){!function(r,t,n){var e=document.createElement("div"),o=document.createElement("h3");o.innerHTML=r.title;var i=document.createElement("p");i.innerHTML=r.body,e.appendChild(o),e.appendChild(i),t%2==0?e.classList.add("whiteSection"):e.classList.add("graySection"),n.appendChild(e)}(r,t,c)})),n.addEventListener("click",(function(){return w(c)}))}(t,r)}))};x(),document.getElementById("scrollButton").addEventListener("mousedown",(function(){window.scrollTo({top:0,behavior:"smooth"})}))},456:(r,t,n)=>{"use strict";n.d(t,{Z:()=>c});var e=n(537),o=n.n(e),i=n(645),a=n.n(i)()(o());a.push([r.id,"body {\r\nmargin: 0; \r\nfont-family: sans-serif; \r\n}\r\n#instruction {\r\ntext-align: center;\r\nmargin: 20px auto;\r\n}\r\n#UserTable {\r\n    width: 90%;\r\n    margin: 20px auto;\r\n}\r\n.UserSectionWrapper {\r\n}\r\n.user_section {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 90% 10%;\r\n    background-color: #0094ff;\r\n    color: #ffffff;\r\n    cursor: pointer;\r\n    border-bottom: 1px solid #ffffff;\r\n    padding: 10px 0px;\r\n}\r\n\r\n    .user_section:hover {\r\n        background-color: #13B7FF; \r\n    }\r\n\r\n\r\n.icon {\r\n    width: 20px;\r\n    height: 20px; \r\n    margin: auto; \r\n}\r\n\r\n.name {\r\n    margin-left: 10px;\r\n}\r\n\r\n.whiteSection, .graySection {\r\n    padding: 10px;\r\n}\r\n\r\n.whiteSection {\r\n    background-color: #E9E9E9;\r\n    color: #3c3c3c;\r\n}\r\n.graySection {\r\n    background-color: #B6B6B6;\r\n    color: #ffffff;\r\n}\r\n\r\n.selected {\r\n\r\n}\r\n\r\n.PostWrapper {\r\n    transition: height 2s;\r\n}\r\n.closed {\r\n    transition: height 2s;\r\n    height: 0px;\r\n    overflow-y: hidden;\r\n\r\n}\r\n\r\n.opened {\r\n    transition: height 2s; \r\n    height: auto;\r\n\r\n}\r\n\r\n#scrollButton {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    left: auto;\r\n    border-radius: 15px;\r\n    padding: 5px 10px;\r\n    background-color: #136AFF;\r\n    color: #ffffff;\r\n    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n    cursor: pointer; \r\n\r\n}\r\n\r\n    #scrollButton:hover {\r\n        background-color: #2777FF; \r\n    }\r\n\r\n    #scrollButton:active {\r\n        transform: translateX(5px) translateY(5px); \r\n        background-color: #136AFF; \r\n    }\r\n\r\n#footer {\r\n    margin: 20px auto;\r\n    display: grid; \r\n    text-align: center;\r\n}\r\n\r\n    #footer div {\r\n        display: block;\r\n        margin: auto;\r\n    }","",{version:3,sources:["webpack://./src/myStyle.css"],names:[],mappings:"AAAA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;IACI,UAAU;IACV,iBAAiB;AACrB;AACA;AACA;AACA;IACI,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,yBAAyB;IACzB,cAAc;IACd,eAAe;IACf,gCAAgC;IAChC,iBAAiB;AACrB;;IAEI;QACI,yBAAyB;IAC7B;;;AAGJ;IACI,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AACA;IACI,yBAAyB;IACzB,cAAc;AAClB;;AAEA;;AAEA;;AAEA;IACI,qBAAqB;AACzB;AACA;IACI,qBAAqB;IACrB,WAAW;IACX,kBAAkB;;AAEtB;;AAEA;IACI,qBAAqB;IACrB,YAAY;;AAEhB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,WAAW;IACX,UAAU;IACV,mBAAmB;IACnB,iBAAiB;IACjB,yBAAyB;IACzB,cAAc;IACd,4CAA4C;IAC5C,eAAe;;AAEnB;;IAEI;QACI,yBAAyB;IAC7B;;IAEA;QACI,0CAA0C;QAC1C,yBAAyB;IAC7B;;AAEJ;IACI,iBAAiB;IACjB,aAAa;IACb,kBAAkB;AACtB;;IAEI;QACI,cAAc;QACd,YAAY;IAChB",sourcesContent:["body {\r\nmargin: 0; \r\nfont-family: sans-serif; \r\n}\r\n#instruction {\r\ntext-align: center;\r\nmargin: 20px auto;\r\n}\r\n#UserTable {\r\n    width: 90%;\r\n    margin: 20px auto;\r\n}\r\n.UserSectionWrapper {\r\n}\r\n.user_section {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 90% 10%;\r\n    background-color: #0094ff;\r\n    color: #ffffff;\r\n    cursor: pointer;\r\n    border-bottom: 1px solid #ffffff;\r\n    padding: 10px 0px;\r\n}\r\n\r\n    .user_section:hover {\r\n        background-color: #13B7FF; \r\n    }\r\n\r\n\r\n.icon {\r\n    width: 20px;\r\n    height: 20px; \r\n    margin: auto; \r\n}\r\n\r\n.name {\r\n    margin-left: 10px;\r\n}\r\n\r\n.whiteSection, .graySection {\r\n    padding: 10px;\r\n}\r\n\r\n.whiteSection {\r\n    background-color: #E9E9E9;\r\n    color: #3c3c3c;\r\n}\r\n.graySection {\r\n    background-color: #B6B6B6;\r\n    color: #ffffff;\r\n}\r\n\r\n.selected {\r\n\r\n}\r\n\r\n.PostWrapper {\r\n    transition: height 2s;\r\n}\r\n.closed {\r\n    transition: height 2s;\r\n    height: 0px;\r\n    overflow-y: hidden;\r\n\r\n}\r\n\r\n.opened {\r\n    transition: height 2s; \r\n    height: auto;\r\n\r\n}\r\n\r\n#scrollButton {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    left: auto;\r\n    border-radius: 15px;\r\n    padding: 5px 10px;\r\n    background-color: #136AFF;\r\n    color: #ffffff;\r\n    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n    cursor: pointer; \r\n\r\n}\r\n\r\n    #scrollButton:hover {\r\n        background-color: #2777FF; \r\n    }\r\n\r\n    #scrollButton:active {\r\n        transform: translateX(5px) translateY(5px); \r\n        background-color: #136AFF; \r\n    }\r\n\r\n#footer {\r\n    margin: 20px auto;\r\n    display: grid; \r\n    text-align: center;\r\n}\r\n\r\n    #footer div {\r\n        display: block;\r\n        margin: auto;\r\n    }"],sourceRoot:""}]);const c=a},645:r=>{"use strict";r.exports=function(r){var t=[];return t.toString=function(){return this.map((function(t){var n="",e=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),e&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=r(t),e&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(r,n,e,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(e)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<r.length;u++){var l=[].concat(r[u]);e&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:r=>{"use strict";r.exports=function(r){var t=r[1],n=r[3];if(!n)return t;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),a=n.sources.map((function(r){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(r," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},752:(r,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>e});const e='<!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <title>Coding Challenge</title> </head> <body> <div id="app"> <h2 id="instruction">Click one of the following names to reveal their posts</h2> <div id="UserTableWrapper"> <div id="UserTable"></div> </div> <div id="scrollButton">Scroll Up</div> <div id="footer"> <div>A Project By Albert Hu</div> <div><a href="https://github.com/Albertyhu/KsenseTechCodingChallenge">Github</a></div> </div> </div> </body> </html>'},666:r=>{var t=function(r){"use strict";var t,n=Object.prototype,e=n.hasOwnProperty,o=Object.defineProperty||function(r,t,n){r[t]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(r,t,n){return Object.defineProperty(r,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),r[t]}try{u({},"")}catch(r){u=function(r,t,n){return r[t]=n}}function l(r,t,n,e){var i=t&&t.prototype instanceof v?t:v,a=Object.create(i.prototype),c=new S(e||[]);return o(a,"_invoke",{value:I(r,n,c)}),a}function f(r,t,n){try{return{type:"normal",arg:r.call(t,n)}}catch(r){return{type:"throw",arg:r}}}r.wrap=l;var d="suspendedStart",p="executing",h="completed",A={};function v(){}function g(){}function m(){}var y={};u(y,a,(function(){return this}));var C=Object.getPrototypeOf,b=C&&C(C(j([])));b&&b!==n&&e.call(b,a)&&(y=b);var x=m.prototype=v.prototype=Object.create(y);function B(r){["next","throw","return"].forEach((function(t){u(r,t,(function(r){return this._invoke(t,r)}))}))}function w(r,t){function n(o,i,a,c){var s=f(r[o],r,i);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==typeof l&&e.call(l,"__await")?t.resolve(l.__await).then((function(r){n("next",r,a,c)}),(function(r){n("throw",r,a,c)})):t.resolve(l).then((function(r){u.value=r,a(u)}),(function(r){return n("throw",r,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(r,e){function o(){return new t((function(t,o){n(r,e,t,o)}))}return i=i?i.then(o,o):o()}})}function I(r,t,n){var e=d;return function(o,i){if(e===p)throw new Error("Generator is already running");if(e===h){if("throw"===o)throw i;return T()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=E(a,n);if(c){if(c===A)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(e===d)throw e=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);e=p;var s=f(r,t,n);if("normal"===s.type){if(e=n.done?h:"suspendedYield",s.arg===A)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(e=h,n.method="throw",n.arg=s.arg)}}}function E(r,n){var e=r.iterator[n.method];if(e===t){if(n.delegate=null,"throw"===n.method){if(r.iterator.return&&(n.method="return",n.arg=t,E(r,n),"throw"===n.method))return A;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=f(e,r.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,A;var i=o.arg;return i?i.done?(n[r.resultName]=i.value,n.next=r.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,A):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,A)}function L(r){var t={tryLoc:r[0]};1 in r&&(t.catchLoc=r[1]),2 in r&&(t.finallyLoc=r[2],t.afterLoc=r[3]),this.tryEntries.push(t)}function k(r){var t=r.completion||{};t.type="normal",delete t.arg,r.completion=t}function S(r){this.tryEntries=[{tryLoc:"root"}],r.forEach(L,this),this.reset(!0)}function j(r){if(r){var n=r[a];if(n)return n.call(r);if("function"==typeof r.next)return r;if(!isNaN(r.length)){var o=-1,i=function n(){for(;++o<r.length;)if(e.call(r,o))return n.value=r[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:T}}function T(){return{value:t,done:!0}}return g.prototype=m,o(x,"constructor",{value:m,configurable:!0}),o(m,"constructor",{value:g,configurable:!0}),g.displayName=u(m,s,"GeneratorFunction"),r.isGeneratorFunction=function(r){var t="function"==typeof r&&r.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},r.mark=function(r){return Object.setPrototypeOf?Object.setPrototypeOf(r,m):(r.__proto__=m,u(r,s,"GeneratorFunction")),r.prototype=Object.create(x),r},r.awrap=function(r){return{__await:r}},B(w.prototype),u(w.prototype,c,(function(){return this})),r.AsyncIterator=w,r.async=function(t,n,e,o,i){void 0===i&&(i=Promise);var a=new w(l(t,n,e,o),i);return r.isGeneratorFunction(n)?a:a.next().then((function(r){return r.done?r.value:a.next()}))},B(x),u(x,s,"Generator"),u(x,a,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),r.keys=function(r){var t=Object(r),n=[];for(var e in t)n.push(e);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},r.values=j,S.prototype={constructor:S,reset:function(r){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!r)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var r=this.tryEntries[0].completion;if("throw"===r.type)throw r.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function o(e,o){return c.type="throw",c.arg=r,n.next=e,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=e.call(a,"catchLoc"),u=e.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(r,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===r||"continue"===r)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=r,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,A):this.complete(a)},complete:function(r,t){if("throw"===r.type)throw r.arg;return"break"===r.type||"continue"===r.type?this.next=r.arg:"return"===r.type?(this.rval=this.arg=r.arg,this.method="return",this.next="end"):"normal"===r.type&&t&&(this.next=t),A},finish:function(r){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===r)return this.complete(n.completion,n.afterLoc),k(n),A}},catch:function(r){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===r){var e=n.completion;if("throw"===e.type){var o=e.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(r,n,e){return this.delegate={iterator:j(r),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=t),A}},r}(r.exports);try{regeneratorRuntime=t}catch(r){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:r=>{"use strict";var t=[];function n(r){for(var n=-1,e=0;e<t.length;e++)if(t[e].identifier===r){n=e;break}return n}function e(r,e){for(var i={},a=[],c=0;c<r.length;c++){var s=r[c],u=e.base?s[0]+e.base:s[0],l=i[u]||0,f="".concat(u," ").concat(l);i[u]=l+1;var d=n(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,e);e.byIndex=c,t.splice(c,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(r,t){var n=t.domAPI(t);return n.update(r),function(t){if(t){if(t.css===r.css&&t.media===r.media&&t.sourceMap===r.sourceMap&&t.supports===r.supports&&t.layer===r.layer)return;n.update(r=t)}else n.remove()}}r.exports=function(r,o){var i=e(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var s=e(r,o),u=0;u<i.length;u++){var l=n(i[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=s}}},569:r=>{"use strict";var t={};r.exports=function(r,n){var e=function(r){if(void 0===t[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}t[r]=n}return t[r]}(r);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},216:r=>{"use strict";r.exports=function(r){var t=document.createElement("style");return r.setAttributes(t,r.attributes),r.insert(t,r.options),t}},565:(r,t,n)=>{"use strict";r.exports=function(r){var t=n.nc;t&&r.setAttribute("nonce",t)}},795:r=>{"use strict";r.exports=function(r){var t=r.insertStyleElement(r);return{update:function(n){!function(r,t,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,o&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(e,r,t.options)}(t,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(t)}}}},589:r=>{"use strict";r.exports=function(r,t){if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}},26:(r,t,n)=>{"use strict";r.exports=n.p+"79572aab7e3714602e6e.png"}},r=>{var t=t=>r(r.s=t);t(666),t(941)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,